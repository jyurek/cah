// Generated by CoffeeScript 1.4.0
(function() {
  var CzarView, Game, GameView, HandView, HomeView, InformationView, PlayAreaView, my_player_id, pusher,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  my_player_id = $.cookie('player_id');

  pusher = null;

  HomeView = (function(_super) {

    __extends(HomeView, _super);

    function HomeView() {
      return HomeView.__super__.constructor.apply(this, arguments);
    }

    HomeView.prototype.events = {
      'click .new-game': 'newGame',
      'click .join-game': 'loadGame'
    };

    HomeView.prototype.newGame = function() {
      var _this = this;
      return $.ajax('/games', {
        type: 'POST',
        dataType: "json",
        success: function(data) {
          var game;
          game = new Game(data);
          game.join();
          return game.start();
        }
      });
    };

    HomeView.prototype.loadGame = function() {
      var game_code,
        _this = this;
      game_code = $('.join-code').val();
      return $.ajax("/games/" + game_code, {
        type: 'GET',
        dataType: "json",
        success: function(data) {
          var game;
          game = new Game(data);
          game.join();
          return game.start();
        }
      });
    };

    return HomeView;

  })(Backbone.View);

  Game = (function() {

    function Game(object) {
      this.populateWith(object);
      this.events = pusher.subscribe(this.code);
    }

    Game.prototype.populateWith = function(object) {
      this.code = object.code;
      this.players = object.players;
      this.play_order = object.play_order;
      this.current_black_card = object.current_black_card;
      return this.answers = object.answers;
    };

    Game.prototype.fetch = function() {
      var _this = this;
      return $.ajax("/games/" + this.code, {
        async: false,
        type: "GET",
        dataType: "json",
        success: function(data) {
          return _this.populateWith(data);
        }
      });
    };

    Game.prototype.join = function() {
      var _this = this;
      return $.ajax("/games/" + this.code + "/player", {
        async: false,
        type: "POST",
        dataType: "json",
        success: function(data) {}
      });
    };

    Game.prototype.start = function() {
      this.fetch();
      this.gameView || (this.gameView = new GameView({
        el: 'body',
        model: this
      }));
      return this.gameView.render();
    };

    Game.prototype.is_czar = function() {
      return my_player_id === this.play_order[0];
    };

    Game.prototype.myCards = function() {
      return this.players[my_player_id];
    };

    Game.prototype.removeMyCards = function(cards) {
      return this.players[my_player_id] = _.difference(this.players[my_player_id], cards);
    };

    Game.prototype.whitePlayerCount = function() {
      return Object.keys(this.players).length - 1;
    };

    Game.prototype.answerCount = function() {
      return Object.keys(this.answers).length;
    };

    Game.prototype.answersReady = function() {
      return this.whitePlayerCount() === this.answerCount() && this.whitePlayerCount() > 0;
    };

    return Game;

  })();

  GameView = (function(_super) {

    __extends(GameView, _super);

    function GameView() {
      this.answerReceived = __bind(this.answerReceived, this);
      return GameView.__super__.constructor.apply(this, arguments);
    }

    GameView.prototype.initialize = function() {
      return this.model.events.bind("cah:answer_submitted", this.answerReceived);
    };

    GameView.prototype.answerReceived = function(data) {
      this.model.answers[data['player']] = data['cards'];
      return this.render();
    };

    GameView.prototype.render = function() {
      this.$el.html(JST['game']);
      new InformationView({
        el: '.information',
        model: this.model
      }).render();
      return new PlayAreaView({
        el: '.playarea',
        model: this.model
      }).render();
    };

    return GameView;

  })(Backbone.View);

  InformationView = (function(_super) {

    __extends(InformationView, _super);

    function InformationView() {
      return InformationView.__super__.constructor.apply(this, arguments);
    }

    InformationView.prototype.initialize = function() {
      var _this = this;
      return this.model.events.bind("cah:new_player", function() {
        _this.model.fetch();
        return _this.render();
      });
    };

    InformationView.prototype.render = function() {
      return this.$el.html(JST['information']({
        game: this.model
      }));
    };

    return InformationView;

  })(Backbone.View);

  PlayAreaView = (function(_super) {

    __extends(PlayAreaView, _super);

    function PlayAreaView() {
      return PlayAreaView.__super__.constructor.apply(this, arguments);
    }

    PlayAreaView.prototype.render = function() {
      if (this.model.is_czar()) {
        return new CzarView({
          el: '.playarea',
          model: this.model
        }).render();
      } else {
        return new HandView({
          el: '.playarea',
          model: this.model
        }).render();
      }
    };

    return PlayAreaView;

  })(Backbone.View);

  CzarView = (function(_super) {

    __extends(CzarView, _super);

    function CzarView() {
      return CzarView.__super__.constructor.apply(this, arguments);
    }

    CzarView.prototype.events = {
      "click .read-answers": "readAnswers",
      "click ol.answers li": "selectAnswer",
      "click .choose-winner": "chooseWinner"
    };

    CzarView.prototype.render = function() {
      $('body').addClass("czar");
      this.$el.html(JST['czar']({
        game: this.model
      }));
      return $('.read-answers').toggle(this.model.answersReady());
    };

    CzarView.prototype.readAnswers = function() {
      $('.answers').show();
      $('.read-answers').hide();
      return $('.choose-winner').show();
    };

    CzarView.prototype.selectAnswer = function(event) {
      $('ol.answers li').removeClass("selected-answer");
      $(event.currentTarget).addClass("selected-answer");
      return $.ajax("/games/" + this.model.code + "/winner", {
        type: "POST",
        dataType: "json",
        data: $('ol.answers .selected-answer')['data-player-id'],
        success: function(response) {}
      });
    };

    CzarView.prototype.chooseWinner = function() {};

    return CzarView;

  })(Backbone.View);

  HandView = (function(_super) {

    __extends(HandView, _super);

    function HandView() {
      return HandView.__super__.constructor.apply(this, arguments);
    }

    HandView.prototype.events = {
      "click .card": "selectCard",
      "click .use-cards": "playCards"
    };

    HandView.prototype.render = function() {
      $('body').removeClass("czar");
      return this.$el.html(JST['hand']({
        game: this.model
      }));
    };

    HandView.prototype.selectCard = function(event) {
      var target;
      target = event.currentTarget;
      $(target).toggleClass("selected");
      if ($(target).is(".selected")) {
        $(target).attr("data-click-time", new Date().getTime());
      }
      return $(".use-cards").toggle($(".cards .selected").length > 0);
    };

    HandView.prototype.playCards = function() {
      var card_names, cards,
        _this = this;
      cards = this.selectedCards();
      this.model.removeMyCards(cards);
      card_names = _.map(cards, function(e) {
        return e.innerText;
      });
      return $.ajax("/games/" + this.model.code + "/answer", {
        type: "POST",
        dataType: "json",
        data: {
          card_names: card_names
        },
        success: function(response) {}
      });
    };

    HandView.prototype.selectedCards = function() {
      var cards;
      cards = $(".cards .selected");
      return cards = _.sortBy(cards.toArray(), function(e) {
        return $(e).attr('data-click-time');
      });
    };

    return HandView;

  })(Backbone.View);

  $(function() {
    pusher = new Pusher('0174638fca8826a47603', {
      encrypted: true
    });
    return new HomeView({
      el: 'body'
    });
  });

}).call(this);
